<?php

namespace Tests\Unit;

use App\Beacon;
use App\DeliveredData;
use App\Sdc\Business\ClientBusiness;
use App\Sdc\Repositories\ClientRepositoryImpl;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class AdTest extends TestCase
{

    use DatabaseTransactions;

    private $clientBusiness;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->clientBusiness = new ClientBusiness(new ClientRepositoryImpl());
    }
    /**
     * A basic test example.
     * @test
     * @return void
     */
    public function testExample()
    {
        $id = 'MU70AXNS8567545448768733747HTX';
        $response = new DeliveredData();
        $beacon = Beacon::where('hw_id', '=', $id)->first();
        if ($beacon->campaign()->first()) {
            $campaign = $beacon->campaign()->first();
            try {
                /* Logica para conseguir el anuncio a mostrar */
                if ($campaign->ads()->count() > 0) {
                    $ads = $campaign->ads()->get();
                    $ad = $ads->random(1);
                }

                $response->client_id = $beacon->client_id;
                $response->beacon_id = $beacon->id;
                $response->ad = $ad;
                return $response;
            } catch (Exception $ex) {

                return null;
            }
        } else {
            return null;
        }
        $this->assertTrue(true);
    }

    /**
     * A basic test example.
     * @test
     * @return void
     */
    public function testDashboard()
    {
        $client = '4';
        $notificado = 'NOTIFICADO';
        $visto = 'VISTO';

        $total_notificados = DB::table('interactions')
            ->where('client_id', '=' , $client)
            ->where('action', '=', $notificado)
            ->distinct('ad_id')
            ->count('ad_id');
        $total_vistos = DB::table('interactions')
            ->where('client_id', '=' , $client)
            ->where('action', '=', $visto)
            ->distinct('ad_id')
            ->count('ad_id');

        echo (json_encode($total_vistos));

        $this->assertTrue(true);
    }
}
